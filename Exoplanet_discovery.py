import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

@st.cache
def load_df(url):
    df = pd.read_csv(url)
    return df

# option
st.set_page_config(page_title="Exoplanet Discovery",
                   page_icon="üßä ",
                   layout="wide",
                   initial_sidebar_state="expanded")


#############
## sidebar ##
############# 

st.sidebar.title('Exoplanet Discovery')
st.sidebar.subheader('Navigation')

categorie = st.sidebar.radio("Categories", ("Accueil", "Observer les Exoplan√®tes", "Les Exoplan√®tes habitables", "L'IA √† l'aide des Astrophysicien"))

st.sidebar.title(' ')
option = st.sidebar.beta_expander("Options")
option.markdown(
    """
    L'option _Montre moi la data_ affichera les donn√©es 
    qui ont permis de r√©aliser les graphiques, sous forme de tableaux. 
    """)
show = option.checkbox('Montre moi la data')

expander = st.sidebar.beta_expander("Sources")
expander.markdown(
    """
    __Les bases des donn√©es utilis√©es__ : 

    [NASA Exoplanet Archives](https://exoplanetarchive.ipac.caltech.edu/cgi-bin/TblView/nph-tblView?app=ExoTbls&config=PS) : 
    Data brutes sur les exoplan√®tes et leur syst√®me solaire.

    [Planetary Habitability Laboratory](http://phl.upr.edu/projects/habitable-exoplanets-catalog/data/database) : 
    D√©termine quelles sont les exoplan√®tes habitables ou inhabitables.
    """)
expander.info('R√©siliation des **Pirates Ducks** : _Antoine, Franck, Micha√´l, Micka√´l_')
expander.info('Hackathon organis√© par la **WildCodeSchool** le 12/05/2021')


##########
## DATA ##
##########

# modifier selon la localisation de la BD
phl_db = 'http://www.hpcf.upr.edu/~abel/phl/hec2/database/phl_exoplanet_catalog.csv'
nea_db = 'https://raw.githubusercontent.com/MickaelKohler/Exoplanet_Discovery/main/planets.csv'

planets = load_df(nea_db)
plan_hab = load_df(phl_db)


###############
## MAIN PAGE ##
###############

if categorie == 'Accueil':
    st.title('Exoplanet Discovery')
    st.subheader('Donner de la vie √† la data')
    st.title(" ")

    st.markdown(
        """
        
        """
    )




elif categorie == "Observer les Exoplan√®tes":
    st.title('Comment d√©couvrir des Exoplan√®tes')
    st.subheader('Des outils et des hommes')
    st.title(" ")

    st.markdown("""
    
    __La d√©couverte d'un nouveau Monde__
    
    Le 6 octobre 1995, les astronomes Michel Mayor et Didier Queloz, ont annonc√©s la d√©couverte d'une premi√®re exoplan√®te.
    Cette plan√®te, nomm√©e __51 Pegasi B__, se  situe √† une cinquantaine d'ann√©es lumi√®re de la Terre dans la constelation du P√©gase.

    """)

    fig = px.histogram(planets, 
    x = "disc_year" ,
    color = "discoverymethod",
    title= "Le nombre de plan√®tes d√©couvertes par ann√©es et par m√©thodes",
    color_discrete_sequence= px.colors.sequential.Plasma_r,
    nbins = 10)  
    st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("""
    
    __Qu'est ce que la m√©thode des vitesses radiales__

    La force de gravit√© des plan√®tes modifie le d√©placement de leur √©toile.
    Les capteurs situ√©s sur Terre vont d√©t√©cter des sp√©ctres passant d'une couleur bleu √† une couleur rouge. 
    Le d√©calage de temps durant le changement de couleurs permet de d√©duire des param√®tres physiques comme la vitesse, la masse et la distance.
    
    __Et la m√©thode la m√©thode du transit ?__

    Cette m√©thode consiste en l'observation d'une r√©p√©tition constante d'une __variation de luminosit√©__ d'une √©toile.
    Lorsqu'une plan√®te passe devant une √©toiles, elle cr√©e une zone d'ombre qui font varier la luminosit√© capt√©e depuis la Terre.

    """)

    fig = px.scatter(
        data_frame = planets,
         x = "sy_disterr1" , y = "pl_orbper",
         title = "Les m√©thodes utilis√©es en fonction de la p√©riode orbitale et de la distance √† la Terre", 
         color = 'discoverymethod' 
     )
    fig.update_layout(
        xaxis_title = "Distance √† la Terre (al)",
        yaxis_title = "P√©riode orbitale autour de l'√©toile"
     )
    fig.update_xaxes(
        range=[-2, 200]
     )
    fig.update_yaxes(
        range=[0, 200]
    )
    st.plotly_chart(fig, use_container_width=True) 

    
elif categorie == "Les Exoplan√®tes habitables":
    st.title('Les caract√©ristiques des Exoplan√®tes habitables')
    st.subheader('O√π sont elles et quels sont leurs projets')
    
    phl_sample = plan_hab[['P_NAME', 'S_TYPE_TEMP', 'P_TYPE', 'S_AGE', 'P_DISTANCE', 'S_TEMPERATURE']]
    zone_hab = pd.merge(planets, phl_sample, left_on='pl_name', right_on='P_NAME', how='left')
    habit = zone_hab[zone_hab['P_HABITABLE'].isin([1, 2])]

    st.markdown(
        """
        On d√©nombre dans la base de donn√©es plus de *** exoplan√®tes et seulement *** qui sont consid√©r√©es comme pouvant potentiellement habriter la vie.
        """
    )

    # r√©parition des planetes
    constelation = planets[planets['P_HABITABLE'].isin([1, 2])][['pl_name', 'hostname', 'S_CONSTELLATION']]
    constelation.dropna(inplace=True)
    fig =px.sunburst(
        constelation,
        path=['S_CONSTELLATION', 'hostname', 'pl_name'],
        maxdepth=2,
        color_discrete_sequence= px.colors.sequential.Peach_r
    )
    fig.update_layout(
        title="<b>O√π sont localis√©es les plan√®tes habitables ?</b>",
        margin = dict(l=10, r=10, b=10, t=30)
    )
    st.plotly_chart(fig, use_container_width=True)

    planet_name = habit[habit.index == habit['sy_dist'].idxmin()].iloc[0,0]
    planet_distance = (habit['sy_dist'].min()*3.26156).round(2)
    st.markdown(
        f"""
        __O√π se situe la plan√®te la plus proche ?__ La plan√®te potentiellement habitables la plus proche est __{planet_name}__, 
        qui est situ√©e √† {planet_distance} ann√©es lumi√®res.

        A savoir, qu'il faudait _76 624 993 ans_ de voyage √† la sonde _Voyager 1_ pour atteindre cette exoplan√®te.
        
        Pour qu'une plan√®te soit consid√©r√© comme habitable, elle doit √™tre situ√©e dans la __Zone Habitable__ qui est la r√©gion de l‚Äôespace 
        o√π les conditions sont favorables √† l‚Äôapparition de la vie, telle que nous la connaissons sur Terre.

        Les limites des zones habitables sont calcul√©es √† partir des √©l√©ments connus de la biosph√®re de la Terre, 
        comme sa position dans le Syst√®me solaire et la quantit√© d'√©nergie qu'elle re√ßoit du Soleil.  
        
        Le graphique ci-dessous permet de bien percevoir cette _Zone Habitable_, les exoplan√®tes devant s'√©loigner √† mesure que 
        son √©toile gagne en puissance.       
        """
    )

    # zone habitable
    clean_zone = zone_hab[(zone_hab['P_DISTANCE'] < 2) & (zone_hab['S_TEMPERATURE'] > 2500) & (zone_hab['S_TEMPERATURE'] < 8000)]
    clean_zone['P_HABITABLE'] = clean_zone['P_HABITABLE'].apply(lambda x: 'Non Habitable' if x == 0 else 'Habitable')
    inHab = clean_zone[clean_zone['P_HABITABLE'] == 'Non Habitable']
    hab = clean_zone[clean_zone['P_HABITABLE'] == 'Habitable']

    fig = go.Figure()
    fig.add_trace(
        go.Scatter(
            text=inHab['pl_name'],
            mode='markers',
            x=inHab['P_DISTANCE'],
            y=inHab['S_TEMPERATURE'],
            marker=dict(
                color='coral',
                opacity=0.3,
            ),
            name='Non Habitable'
        )
    )
    fig.add_trace(
        go.Scatter(
            text=hab['pl_name'],
            mode='markers',
            x=hab['P_DISTANCE'],
            y=hab['S_TEMPERATURE'],
            marker=dict(
                color='darkgreen'
            ),
            name='Habitable'
        )
    )
    fig.update_layout(
        title='<b>La situation des plan√®tes habitables selon la chaleur du soleil et la distance</b>',
        yaxis=dict(title="Temp√©rature du soleil (en kelvins)"),
        xaxis=dict(title="Distance plan√®te/√©toile (en ann√©e-lumi√®re)"),
        margin = dict(l=10, r=10, b=10, t=70))
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("---")
    
    # Comparatif Habitable/inhabitable
    st.subheader("Qu'est ce qui caract√©rise une plan√®te habitable ?")
    st.markdown(
        """
        La _Zone Habitable_ met en avant la n√©cessit√© de d√©terminer les crit√®res 
        qui font qu‚Äôune exoplan√®te soit suspect√©e comme pouvant √™tre habitable. 

        On peut donc tenter de comparer les caract√©ristiques des exoplan√®tes 
        consid√©r√©es comme habitables de l‚Äôensemble des exoplan√®tes.

        Restons dans les √©toiles et essayons de r√©pondre √† la question : 
        _Quelle type d‚Äô√©toile favorise la pr√©sence d‚Äôexoplan√®tes habitables ?_
        """
    )

    # Sun Type
    sType = pd.DataFrame(zone_hab['S_TYPE_TEMP'].value_counts(normalize=True)*100).rename(columns={'S_TYPE_TEMP':'Exoplan√®tes'})
    sType_hab = habit['S_TYPE_TEMP'].value_counts(normalize=True)*100
    sType_tab = pd.concat([sType, sType_hab], axis=1).reindex(index = ['O','B','A', 'F', 'G', 'K', 'M'])
    sType_tab = sType_tab.fillna(0).rename(columns={'S_TYPE_TEMP':'Habitables'}).round(2)

    fig = px.bar(sType_tab, x=sType_tab.index, y=["Exoplan√®tes", "Habitables"],
                title="<b>La r√©partition des exoplan√®tes selon le type de leur Soleil</b> (en pourcents)", barmode='group')
    fig.update_traces(texttemplate='%{text}%', textposition='outside')
    fig.update_layout(showlegend=True, font_family='IBM Plex Sans',
                      xaxis=dict(title="Cat√©gorie d'√©toile"),
                      yaxis=dict(title=None),
                      uniformtext_minsize=10, uniformtext_mode='hide',
                      margin=dict(l=10, r=10, b=10),
                      plot_bgcolor='rgba(0,0,0,0)',
                      legend=dict(
                            x=0,
                            y=1,
                            traceorder="normal",
                            bgcolor='rgba(0,0,0,0)',
                            font=dict(
                                size=12)))
    texts = [sType_tab["Exoplan√®tes"], sType_tab["Habitables"]]
    for i, t in enumerate(texts):
        fig.data[i].text = t
    st.plotly_chart(fig, use_container_width=True)
    
    col1, col2 = st.beta_columns([1,2])
    with col1:
        st.markdown(
            """
            On peut constater que ce sont surtout les √©toiles de type K et M qui comprennent le plus d‚Äôexoplan√®tes habitables. 
            Ce qui s‚Äôexplique sans doute par le faite que ce sont les plus petites et donc les moins chaudes. 

            Le tableau ci-contre explique la diff√©rence entre chaque type.
            """)

    with col2:
        sol_typ = pd.DataFrame(data=[['> 25 000 K', 'bleue', 'azote, carbone, h√©lium et oxyg√®ne'],
                                     ['10 000‚Äì25 000 K', 'bleue-blanche', 'h√©lium, hydrog√®ne'],
                                     ['7 500‚Äì10 000 K', 'blanche', 'hydrog√®ne'],
                                     ['6 000‚Äì7 500 K', 'jaune-blanche', 'm√©taux : fer, titane, calcium, strontium et magn√©sium'],
                                     ['5 000‚Äì6 000 K', 'jaune (comme le Soleil)', 'calcium, h√©lium, hydrog√®ne et m√©taux'],
                                     ['3 500‚Äì5 000 K', 'orange', 'm√©taux et monoxyde de titane'],
                                     ['< 3 500 K', 'rouge', 'm√©taux et monoxyde de titane']],
                               index=['O', 'B', 'A', 'F', 'G', 'K', 'M'],
                               columns=['temp√©rature', 'couleur conventionnelle', "raies d'absorption"])
        st.write(sol_typ)
    
    # Sun Age
    sAge = planets.groupby((zone_hab['S_AGE'] // 2) * 2).count()[['pl_name']]
    sAge.iloc[5, 0] = sAge.iloc[5:, 0].sum()
    sAge['norm'] = ((sAge['pl_name']*100) / sAge['pl_name'].sum()).round(2)
    sAge = sAge.drop(columns=['pl_name']).drop([12, 14]).rename(columns={'norm':'Exoplan√®tes'})

    sAge_hab = habit.groupby((habit['S_AGE'] // 2) * 2).count()[['pl_name']]
    sAge_hab['norm'] = ((sAge_hab['pl_name']*100) / sAge_hab['pl_name'].sum()).round(2)
    sAge_hab = sAge_hab.drop(columns=['pl_name']).rename(columns={'norm':'Habitables'})

    sAge_tab = pd.concat([sAge, sAge_hab], axis=1).fillna(0).round(2)
    sAge_tab.rename(index={0:'<2', 2:'2-4', 4:'4-6', 6:'6-8', 8:'8-10', 10:'+10'}, inplace=True)

    fig = px.bar(sAge_tab, x=sAge_tab.index, y=["Exoplan√®tes", "Habitables"],
                title="<b>La r√©partition des exoplan√®tes selon l'age de leur √©toile</b> (en pourcents)", barmode='group')
    fig.update_traces(texttemplate='%{text}%', textposition='outside')
    fig.update_layout(showlegend=True, font_family='IBM Plex Sans',
                      xaxis=dict(title="Age de l'√©toile (Gy)"),
                      yaxis=dict(title=None),
                        uniformtext_minsize=10, uniformtext_mode='hide',
                        margin=dict(l=10, r=10, b=10),
                        plot_bgcolor='rgba(0,0,0,0)',
                        legend=dict(
                            x=0,
                            y=1,
                            traceorder="normal",
                            bgcolor='rgba(0,0,0,0)',
                            font=dict(
                                size=12)))
    texts = [sAge_tab["Exoplan√®tes"], sAge_tab["Habitables"]]
    for i, t in enumerate(texts):
        fig.data[i].text = t
    st.plotly_chart(fig, use_container_width=True)

    st.markdown(
        """
        Toujours dans les √©toiles, on remarque que les exoplan√®tes observ√©es sont essentiellement situ√©es 
        sur les __√©toiles les plus jeunes__, m√™me si aucune tranche d‚Äô√¢ge ne sort du lot. 

        Pour que la vie puisse appara√Ætre sur une plan√®te, il ne suffit pas qu'elle soit dans l'√©cosph√®re de son √©toile¬†; 
        son syst√®me plan√©taire doit se situer __assez pr√®s du centre de la galaxie__ pour avoir suffisamment d'√©l√©ments lourds 
        qui favorisent la formation de plan√®tes telluriques et des atomes n√©cessaires √† la vie (fer, cuivre, etc).

        Mais ce syst√®me devra √©galement se situer __assez loin du centre galactique__ pour √©viter des dangers tels que 
        le trou noir au centre de la galaxie et les supernova.

        Mais l'exoplan√®te en elle m√™me doit pr√©senter des conditions intrins√®que pour 
        √™tre une bonne candidate pour accueillir la vie. 
        """
    )

    # Exoplanet type
    pType = pd.DataFrame(zone_hab['P_TYPE'].value_counts(normalize=True)*100).rename(columns={'P_TYPE':'Exoplan√®tes'})
    pType_hab = habit['P_TYPE'].value_counts(normalize=True)*100
    pType_tab = pd.concat([pType, pType_hab], axis=1).reindex(index = ['Miniterran','Subterran','Terran', 'Superterran', 'Neptunian', 'Jovian'])
    pType_tab = pType_tab.fillna(0).round(2).rename(columns={'P_TYPE':'Habitables'})

    fig = px.bar(pType_tab, x=pType_tab.index, y=["Exoplan√®tes", "Habitables"],
                title="<b>La r√©partition des exoplan√®tes selon leur type</b> (en pourcents)", barmode='group')
    fig.update_traces(texttemplate='%{text}%', textposition='outside')
    fig.update_layout(showlegend=True, font_family='IBM Plex Sans',
                      xaxis=dict(title="Type d'exoplan√®te"),
                      yaxis=dict(title=None),
                        uniformtext_minsize=10, uniformtext_mode='hide',
                        margin=dict(l=10, r=10, b=10),
                        plot_bgcolor='rgba(0,0,0,0)',
                        legend=dict(
                            x=0,
                            y=1,
                            traceorder="normal",
                            bgcolor='rgba(0,0,0,0)',
                            font=dict(
                                size=12)))
    texts = [pType_tab["Exoplan√®tes"], pType_tab["Habitables"]]
    for i, t in enumerate(texts):
        fig.data[i].text = t

    col1, col2 = st.beta_columns([3, 1])
    with col1:
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.title(" ")
        st.markdown(
            """
            Les type d'exoplanet selon
            la masse de la terre (MT): 
            - _Miniterran_ : -0,1 MT
            - _Subterran_ : 0,1 √† 0,5 MT
            - _Terran_ : 0,5 √† 2 MT
            - _Superterran : 2 √† 10 MT
            - _Neptunian_ : 10 √† 50 MT
            - _Jovian_ : +50 MT 
            """
        )
    
    st.markdown(
        """
        Les exoplan√®te habitables sont essentiellement situ√©es sur des plan√®tes √©quivalentes 
        √† la terre ou l√©g√®rement plus grosse. Comme pour la _Zone Habitable_, la conditions de 
        validit√© pour √™tre consid√©r√©e comme une exoplan√®te habitable est tr√®s restreinte. 

        Ces conditions ne sont bien sur pas limitatives. Il existe de nombreux crit√®res √† prendre en compte. 
        De nombreuses variables qui peuvent √™tre √©tudi√©es par un algorithme afin de 
        pouvoir cr√©er un mod√®le permettant de rep√©rer les exoplan√®tes.
        """
    )


elif categorie == "L'IA √† l'aide des Astrophysicien":
    st.title("L'intelligence artificielle √† la recherche de la vie")
    st.subheader("Comment le Machine Learning peut venir √† l'aide des Astrophysicien")
    st.title(" ")

    col1, col2 = st.beta_columns(2)
    













    
